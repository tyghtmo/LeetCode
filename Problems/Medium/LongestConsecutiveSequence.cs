using System.Diagnostics;

namespace Problems.Medium;

internal record LCSParams
{
    public required int[] Nums { get; set; }
    public required int ExpectedOutput { get; set; }
}

public class LongestConsecutiveSequence : IProblemDefinition
{
    private readonly List<LCSParams> _params = [
        new() {
            Nums = [100,4,200,1,3,2],
            ExpectedOutput = 4
        },
        new() {
            Nums = [0,3,7,2,5,8,4,6,0,1],
            ExpectedOutput = 9
        },
        new() {
            Nums = [722,531,2963,2690,2177,1316,231,128,694,2015,102,2819,2044,2230,2713,2641,2489,320,305,2775,1999,2432,521,1356,479,1903,1000,1241,2814,2255,810,1735,1173,1328,2134,2558,1798,789,2069,1168,2710,551,2584,2456,481,1734,900,2088,2492,1713,1394,2338,299,68,2833,2137,710,1457,789,28,318,1804,539,278,2765,2615,626,2070,2323,1806,1912,237,25,927,1416,384,2311,1930,2360,2204,1918,951,2258,237,2316,2413,1947,198,2164,1319,746,2425,348,748,1155,1793,686,298,484,1730,504,1759,2659,612,131,514,1495,1756,401,491,1179,1630,1165,912,2420,2670,306,1618,108,1945,2927,2492,103,1454,977,1714,2910,200,2275,2439,2032,2577,778,665,2771,688,95,224,1520,1280,133,1890,402,602,2423,112,928,1088,2182,1604,2455,1477,2495,2589,2069,820,1803,860,2123,465,2,764,1850,2960,2146,2625,2472,377,2882,337,1788,1278,1938,1201,2043,1335,27,624,227,1383,1860,150,454,2654,1702,2922,2689,920,1214,352,257,2099,2660,616,1426,1141,2085,1562,2016,2676,1809,821,2010,2061,1248,1832,557,2810,2216,1535,1468,1600,2498,2868,2876,2152,481,209,1061,339,1354,30,1699,1749,1800,498,1430,2047,656,1720,953,2014,29,1411,1025,1457,2224,108,1597,1820,620,1566,2166,1697,350,623,2661,2963,1981,2607,148,215,2509,2468,2362,2389,294,214,2805,2081,359,2959,1335,1741,1366,2606,1412,2545,2417,288,724,1212,2379,2363,24,2854,1312,1702,114,2820,2394,289,2146,1032,2863,1081,421,997,2663,2271,598,2711,2204,584,1460,1584,758,56,981,244,2768,1921,2658,180,974,475,2710,1083,1007,2220,2072,2911,2312,1608,989,606,248,2555,1403,1646,807,1626,578,400,892,2258,909,125,2006,2550,292,1537,2979,2129,2329,435,2665,987,332,1873,1599,2476,2387,1423,2389,1084,1202,2765,533,45,1727,1616,1537,1949,716,1344,1359,2619,1790,772,1148,1075,1166,2761,852,447,2037,2207,1589,563,61,1671,28,2160,271,2610,1780,2663,1609,2002,399,1494,2218,451,1035,2958,1345,688,123,852,163,2553,2410,1360,1145,858,746,321,1262,2427,964,2454,1891,1529,2175,2575,2650,167,2215,686,1914,2906,2530,2612,1791,2950,1296,2070,2259,525,2352,1220,574,1205,2992,1920,1696,2250,2977,1013,2619,1780,217,2278,645,2754,1508,2363,1036,2925,1332,2959,838,574,393,2629,1544,387,727,1319,1363,669,2222,1339,1983,1899,2234,1750,134,2275,41,1263,2082,2188,2932,1468,2171,1132,1378,652,1203,1785,1539,811,2657,2190,2080,2551,2449,1762,1333,1614,1183,521,1997,2982,1901,1060,1659,1866,2705,2026,2968,2584,854,681,2058,1249,1363,105,817,1582,2864,1931,584,1967,1398,111,2882,2932,79,2369,1665,2859,111,2548,161,1550,2223,779,2897,2535,353,1555,134,1862,547,253,1376,1251,1546,1792,1611,1621,2974,862,1216,2190,2115,2926,1264,780,448,991,438,1085,9,1866,2577,227,75,558,2580,727,1528,1612,11,480,1237,223,560,2260,444,2344,2102,1811,1658,231,1165,622,1795,1028,455,1942,866,2403,2267,372,917,680,1142,1022,2081,1286,798,2896,1749,260,2572,1752,102,1470,1233,60,2320,344,158,762,1000,2726,2586,2471,2613,2479,2643,2605,931,2343,2452,258,1318,65,381,1355,1519,965,2049,2691,954,2862,492,188,2873,2119,2105,777,1966,929,578,1219,2167,1114,1788,1949,988,1634,2676,1346,798,2163,140,1512,1003,367,619,1648,1509,1818,937,2946,2551,396,1734,492,2762,908,939,1323,2356,627,1279,64,2792,1658,994,1792,236,1122,2548,2457,2494,1438,1159,1045,2262,2397,2945,1220,552,1529,897,1288,2500,570,758,280,764,1088,1647,1335,543,2826,848,923,450,2410,644,557,2735,652,775,2360,2053,202,1638,2764,2878,1420,2349,1439,1811,558,2628,2571,76,677,1533,453,215,2411,2993,1529,76,134,1977,1936,479,2698,1417,2664,2838,1287,536,328,587,922,948,1049,2279,1934,1287,1244,1948,685,2290,912,146,2799,2189,1993,108,455,791,1817,1586,1872,2164,926,1665,992,2158,2141,970,2513,1608,1331,1185,2116,2609,1373,2510,152,1691,741,769,765,103,667,563,1162,235,2132,192,329,1318,2810,365,568,1133,2803,2977,2520,2763,667,2952,1766,855,1598,1003,221,2726,2944,1548,1699,293,2444,1541,1430,844,400,1607,1937,75,2597,2060,2057,324,1386,1271,431,1823,1051,202,757,2977,2011,1762,2397,25,1206,2732,391,1372,1295,2239,347,1334,228,2391,1556,1106,2990,1678,2495,1630,96,2023,115,1634,1855,1564,2594,1498,2145,2359,1534,2808,2104,294,378,1373,1331,189,2020,2468,1532,2808,1082,1415,297,2201,2845,653,2910,338,1286,988,858,401,2537,2847,78,2980,255,696,296,48,2097,2166,2428,1242,2832,2370,127,2200,24,14,1612,1577,716,1149,1,2824,2826,900,871,1186,600,2785,1464,118,187,2354,649,2547,322,2581,55,155,1145,148,1400,571,2390,1935,1812,1298,251,422,2894,186,2047,551,1575,977,2155,2681,888,2175,1899,870,2603,739,2173,1025,1087,1567,1145,1583,1182,2415,2942,976,2737,378,2425,1936,2829,724,1169,2057,690,255,2880,2123,1633,1714,946,2028,1079,2662,2740,946,1607,1661,19,201,2634,1493,2619,2716,2051,268,1568,2570,1740,1066,2222,2806,2829,2635,650,759,1109,2760,2042,1173,2192,1919,545],
            ExpectedOutput = 9
        },
        new() {
            Nums = [9,1,4,7,3,-1,0,5,8,-1,6],
            ExpectedOutput = 7
        }
    ];

    public string Name => "Longest Consecutive Sequence";

    public ProblemType ProblemType => ProblemType.Medium;

    public ProblemResult TestProblem()
    {
        List<SolutionResult> solutionResults = [];

        solutionResults.Add(RunSolution("Solution 1", SortAndIterate));

        return new ProblemResult(this, solutionResults);
    }

    private SolutionResult RunSolution(string solutionName, Func<int[], int> func)
    {
        List<RunResult> runResults = [];
        var stopwatch = new Stopwatch();

        // Call before measuring to ensure func is compiled
        func.Invoke(_params[0].Nums);

        for (int i = 0; i < _params.Count; i++)
        {
            var error = "";

            try
            {
                stopwatch.Restart();
                var res = func.Invoke(_params[i].Nums);
                stopwatch.Stop();

                if (res != _params[i].ExpectedOutput)
                {
                    error = $"Incorrect output. Got {res}, expected {_params[i].ExpectedOutput}";
                }
            }
            catch (Exception ex)
            {
                error = $"Exception: {ex.Message}";
            }

            runResults.Add(new RunResult(i, stopwatch.Elapsed, error));
        }

        return new SolutionResult(solutionName, runResults);
    }

    private static int SortAndIterate(int[] nums)
    {
        Array.Sort(nums);

        if (nums.Length <= 1)
        {
            return nums.Length;
        }

        int count = 1;
        int maxCount = 1;

        for (int i = 1; i < nums.Length; i++)
        {
            if (nums[i] == nums[i-1])
            {
                continue;
            }
            else if (nums[i] == nums[i - 1] + 1)
            {
                count++;
                maxCount = Math.Max(count, maxCount);
            } 
            else
            {                
                count = 1;
            }
        }

        return maxCount;
    }
}